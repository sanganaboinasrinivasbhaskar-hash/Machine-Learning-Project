# House Price Prediction using Machine Learning in Python
# This example uses the California Housing dataset from scikit-learn.
# We will use Linear Regression for prediction.

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Step 2: Load the dataset
# Fetch the California Housing dataset (target is median house value in $100,000s)
housing = fetch_california_housing(as_frame=True)
df = housing.frame

# Display basic info about the dataset
print("Dataset shape:", df.shape)
print("\nFirst 5 rows:")
print(df.head())
print("\nDataset description:")
print(df.describe())

# Step 3: Prepare features and target
# Features (X): All columns except the target
# Target (y): 'MedHouseVal' (median house value)
X = df.drop('MedHouseVal', axis=1)
y = df['MedHouseVal']

# Step 4: Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Scale the features (important for Linear Regression)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Train the Linear Regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Step 7: Make predictions on the test set
y_pred = model.predict(X_test_scaled)

# Step 8: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (R2) Score: {r2:.2f}")

# Step 9: Visualize predictions vs actual values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.9)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Actual House Prices (in $100,000s)')
plt.ylabel('Predicted House Prices (in $100,000s)')
plt.title('Actual vs Predicted House Prices')
plt.show()

# Optional: Predict a single new house (example with sample features)
# Note: Features must be scaled and match the dataset's structure
sample_house = np.array([[8.3252, 41.0, 6.9841, 1.0238, 322.0, 2.5556, 37.88, -122.23]])  # Example from dataset
sample_house_scaled = scaler.transform(sample_house)
predicted_price = model.predict(sample_house_scaled)[0]
print(f"\nPredicted price for sample house: ${predicted_price * 30000000:.2f}")